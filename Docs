// import Image from 'next/image'

 <Image 
      loading='lazy'
      alt='Zoro picture'
      width={300}
      height={300}
      src={"https://i.pinimg.com/564x/c0/51/4a/c0514ad71f49a6f94b879b863184e621.jpg"}
      placeholder='blur'
      blurDataURL='data:image/svg+xml;base64,...'
    /> *




UPDATE
protectedroute.post('/Products', async (req: RequestWithUser, res: Response) => {
  const userId = req.user?._id;

  try {
      const {
          productId, // Optional: ID for the product to update
          productName,
          productDescription,
          productCategory,
          productQuality,
          productQuantity,
          Sku,
          productSize,
          productPrice,
          productDiscount,
          productWeight,
          images,
          status,
          ScheduleDate,
          Featured
      } = req.body;

      // If productId is provided, update the existing product
      if (productId) {
          const updatedProduct = await Product.findByIdAndUpdate(
              productId,
              {
                  productName,
                  productDescription,
                  productCategory,
                  productQuality,
                  productQuantity,
                  Sku,
                  productSize,
                  productPrice,
                  productDiscount,
                  productWeight,
                  images,
                  status,
                  ScheduleDate,
                  Featured
              },
              { new: true } // Return the updated document
          );

          if (!updatedProduct) {
              return res.status(404).json({ error: 'Product not found' });
          }

          return res.status(200).json({ message: 'Product successfully updated', product: updatedProduct });
      } else {
          // Otherwise, create a new product
          const newProduct = new Product({
              userId,
              productName,
              productDescription,
              productCategory,
              productQuality,
              productQuantity,
              Sku,
              productSize,
              productPrice,
              productDiscount,
              productWeight,
              images,
              status,
              ScheduleDate,
              Featured
          });

          await newProduct.save();
          return res.status(201).json({ message: 'Product successfully added', product: newProduct });
      }
  } catch (error) {
      console.error('Error processing product:', error);
      return res.status(500).json({ error: 'Internal server error' });
  }
});
