 server.get('/api/users', async (req: Request, res: Response) => {
    try {
      
      const database = client.db('Online-marketplace');
      const users = database.collection('Accounts');
      const userData = await users.find({}).toArray();
      res.status(200).json(userData);

    } 
    
    catch (error) {

      console.error('Error fetching users:', error);
      res.status(500).json({ message: 'Failed to fetch users' });

    }

  });
  



  
interface Users {

  username: string;
  password: string;

}

type Account = Users[];

  const[userData, setdata] = useState<Users[]>([])

  useEffect(() => {

    const fetched = async() => {

      try {

        const response = await fetch('http://localhost:3001/api/users');

      if(!response.ok) {

        throw new Error ('Error fetching getData')

      }

      const data = await response.json()
      setdata(data as Account)

      console.log("this is data: ", data)

      }

      catch(error) {

        console.error(error)

      }

    }

    fetched();

  }, [])




  
  <div>
  {/* Render your user data here */}
  {userData.length > 0 ? (  
    userData.map(user => <div key={user.username}>{user.username} {user.password}</div>)
  ) : (
    <p>No users found.</p>
  )}
</div>



const corsOptions = {
  origin: 'https://online-marketplace-eight.vercel.app', // Replace with your front-end URL
  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Specify the methods you want to allow
  credentials: true, // Allow credentials if needed
};

server.use(cors(corsOptions));


















verified user:  {
  _id: new ObjectId('66bb35aadfa36278202514f2'),
  Name: 'dredger',
  Email: 'dredgerbroker@gmail.com',
  Password: '$2b$10$DeaF9WhkF7HcehbflJJyJ.9gL0j3zy.qm9lAed2lA7OnL7z6UeUw.',
  Role: 'buyer',
  isVerifiedEmail: false,
  emailToken: 'da1c3e495b8fa11500413e308fa74532c0828c5060b7223012f9b1ea9c3298e11ef24e0b09c55a45460714845924c34e31086ae658044a89735bd28269f76296',
  __v: 0
}
Error verifying email: Error: User validation failed: emailToken: Path `emailToken` is required.
    at ValidationError.inspect (/var/task/node_modules/mongoose/lib/error/validation.js:50:26)
    at formatValue (node:internal/util/inspect:806:19)
    at inspect (node:internal/util/inspect:365:10)
    at formatWithOptionsInternal (node:internal/util/inspect:2304:40)
    at format (node:internal/util/inspect:2161:10)
    at me (/opt/rust/nodejs.js:1:13974)
    at /opt/rust/nodejs.js:5:238
    at AsyncLocalStorage.run (node:async_hooks:346:14)
    at console.<anonymous> (/opt/rust/nodejs.js:5:203)
    at /vercel/path0/verificationRoutes.ts:39:15 {
  errors: {
    emailToken: ValidatorError: Path `emailToken` is required.
        at validate (/var/task/node_modules/mongoose/lib/schemaType.js:1385:13)
        at SchemaString.SchemaType.doValidate (/var/task/node_modules/mongoose/lib/schemaType.js:1369:7)
        at /var/task/node_modules/mongoose/lib/document.js:3071:18
        at processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: [Object],
      kind: 'required',
      path: 'emailToken',
      value: '',
      reason: undefined,
      [Symbol(mongoose#validatorError)]: true
    }
  },
  _message: 'User validation failed'
}
