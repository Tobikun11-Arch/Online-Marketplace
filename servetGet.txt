 server.get('/api/users', async (req: Request, res: Response) => {
    try {
      
      const database = client.db('Online-marketplace');
      const users = database.collection('Accounts');
      const userData = await users.find({}).toArray();
      res.status(200).json(userData);

    } 
    
    catch (error) {

      console.error('Error fetching users:', error);
      res.status(500).json({ message: 'Failed to fetch users' });

    }

  });
  



  
interface Users {

  username: string;
  password: string;

}

type Account = Users[];

  const[userData, setdata] = useState<Users[]>([])

  useEffect(() => {

    const fetched = async() => {

      try {

        const response = await fetch('http://localhost:3001/api/users');

      if(!response.ok) {

        throw new Error ('Error fetching getData')

      }

      const data = await response.json()
      setdata(data as Account)

      console.log("this is data: ", data)

      }

      catch(error) {

        console.error(error)

      }

    }

    fetched();

  }, [])




  
  <div>
  {/* Render your user data here */}
  {userData.length > 0 ? (  
    userData.map(user => <div key={user.username}>{user.username} {user.password}</div>)
  ) : (
    <p>No users found.</p>
  )}
</div>



const corsOptions = {
  origin: 'https://online-marketplace-eight.vercel.app', // Replace with your front-end URL
  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Specify the methods you want to allow
  credentials: true, // Allow credentials if needed
};

server.use(cors(corsOptions));


Connection error: MongooseServerSelectionError: Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/
    at _handleConnectionErrors (/var/task/node_modules/mongoose/lib/connection.js:897:11)
    at NativeConnection.openUri (/var/task/node_modules/mongoose/lib/connection.js:848:11)
    at runNextTicks (node:internal/process/task_queues:60:5)
    at processTimers (node:internal/timers:511:9)
    at connectToMongoDB (/vercel/path0/db.ts:19:9) {
  reason: TopologyDescription {
    type: 'ReplicaSetNoPrimary',
    servers: Map(3) {
      'ac-zgzfndk-shard-00-01.rs9yhha.mongodb.net:27017' => [ServerDescription],
      'ac-zgzfndk-shard-00-02.rs9yhha.mongodb.net:27017' => [ServerDescription],
      'ac-zgzfndk-shard-00-00.rs9yhha.mongodb.net:27017' => [ServerDescription]
    },
    stale: false,
    compatible: true,
    heartbeatFrequencyMS: 10000,
    localThresholdMS: 15,
    setName: 'atlas-nkol0w-shard-0',
    maxElectionId: null,
    maxSetVersion: null,
    commonWireVersion: 0,
    logicalSessionTimeoutMinutes: null
  },
  code: undefined
}
MongoDB connection error: MongooseServerSelectionError: Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/
    at _handleConnectionErrors (/var/task/node_modules/mongoose/lib/connection.js:897:11)
    at NativeConnection.openUri (/var/task/node_modules/mongoose/lib/connection.js:848:11)
    at runNextTicks (node:internal/process/task_queues:60:5)
    at processTimers (node:internal/timers:511:9)
    at connectToMongoDB (/vercel/path0/db.ts:19:9) {
  reason: TopologyDescription {
    type: 'ReplicaSetNoPrimary',
    servers: Map(3) {
      'ac-zgzfndk-shard-00-01.rs9yhha.mongodb.net:27017' => [ServerDescription],
      'ac-zgzfndk-shard-00-02.rs9yhha.mongodb.net:27017' => [ServerDescription],
      'ac-zgzfndk-shard-00-00.rs9yhha.mongodb.net:27017' => [ServerDescription]
    },
    stale: false,
    compatible: true,
    heartbeatFrequencyMS: 10000,
    localThresholdMS: 15,
    setName: 'atlas-nkol0w-shard-0',
    maxElectionId: null,
    maxSetVersion: null,
    commonWireVersion: 0,
    logicalSessionTimeoutMinutes: null
  },
  code: undefined
}
Node.js process exited with exit status: 1. The logs above can help with debugging the issue.
